#![allow(dead_code)]

pub fn color_lerp(colors:[[f32;3];11], min:f32, max:f32, mut t:f32) -> [f32; 3]{
    if t < min {
        t = min;
    } 
    if t > max {
        t = max;
    }
    let tn = (t-min)/(max - min);
    let indx = (10.0 * tn).floor() as usize;
    
    if indx as f32 == 10.0 * tn {
        colors[indx]
    } else {
        let tn1 = (tn - 0.1 * indx as f32)*10.0; // rescale
        let a = colors[indx];
        let b = colors[indx+1];
        let color_r = a[0] + (b[0] - a[0]) * tn1;
        let color_g = a[1] + (b[1] - a[1]) * tn1;
        let color_b = a[2] + (b[2] - a[2]) * tn1;
        [color_r, color_g, color_b]
    }
}

pub fn colormap_data(colormap_name: &str) -> [[f32; 3]; 11] {
    let colors = match colormap_name {
        "hsv" => [[1.0,0.0,0.0],[1.0,0.5,0.0],[0.97,1.0,0.01],[0.0,0.99,0.04],[0.0,0.98,0.52],
            [0.0,0.98,1.0],[0.01,0.49,1.0],[0.03,0.0,0.99],[1.0,0.0,0.96],[1.0,0.0,0.49],[1.0,0.0,0.02]],

        "hot" => [[0.0,0.0,0.0],[0.3,0.0,0.0],[0.6,0.0,0.0],[0.9,0.0,0.0],[0.93,0.27,0.0],
            [0.97,0.55,0.0],[1.0,0.82,0.0],[1.0,0.87,0.25],[1.0,0.91,0.5],[1.0,0.96,0.75],[1.0,1.0,1.0]],

        "cool" => [[0.49,0.0,0.7],[0.45,0.0,0.85],[0.42,0.15,0.89],[0.38,0.29,0.93],[0.27,0.57,0.91],
            [0.0,0.8,0.77],[0.0,0.97,0.57],[0.0,0.98,0.46],[0.0,1.0,0.35],[0.16,1.0,0.03],[0.58,1.0,0.0]],

        "spring" => [[1.0,0.0,1.0],[1.0,0.1,0.9],[1.0,0.2,0.8],[1.0,0.3,0.7],[1.0,0.4,0.6],
            [1.0,0.5,0.5],[1.0,0.6,0.4],[1.0,0.7,0.3],[1.0,0.8,0.2],[1.0,0.9,0.1],[1.0,1.0,0.0]],

        "summer" => [[0.0,0.5,0.4],[0.1,0.55,0.4],[0.2,0.6,0.4],[0.3,0.65,0.4],[0.4,0.7,0.4],
            [0.5,0.75,0.4],[0.6,0.8,0.4],[0.7,0.85,0.4],[0.8,0.9,0.4],[0.9,0.95,0.4],[1.0,1.0,0.4]],

        "autumn" => [[1.0,0.0,0.0],[1.0,0.1,0.0],[1.0,0.2,0.0],[1.0,0.3,0.0],[1.0,0.4,0.0],[1.0,0.5,0.0],
            [1.0,0.6,0.0],[1.0,0.7,0.0],[1.0,0.8,0.0],[1.0,0.9,0.0],[1.0,1.0,0.0]],

        "winter" => [[0.0,0.0,1.0],[0.0,0.1,0.95],[0.0,0.2,0.9],[0.0,0.3,0.85],[0.0,0.4,0.8],
            [0.0,0.5,0.75],[0.0,0.6,0.7],[0.0,0.7,0.65],[0.0,0.8,0.6],[0.0,0.9,0.55],[0.0,1.0,0.5]],

        "bone" => [[0.0,0.0,0.0],[0.08,0.08,0.11],[0.16,0.16,0.23],[0.25,0.25,0.34],[0.33,0.33,0.45],
            [0.41,0.44,0.54],[0.5,0.56,0.62],[0.58,0.67,0.7],[0.66,0.78,0.78],[0.83,0.89,0.89],
            [1.0,1.0,1.0]],

        "cooper" => [[0.0,0.0,0.0],[0.13,0.08,0.05],[0.25,0.16,0.1],[0.38,0.24,0.15],[0.5,0.31,0.2],
            [0.62,0.39,0.25],[0.75,0.47,0.3],[0.87,0.55,0.35],[1.0,0.63,0.4],[1.0,0.71,0.45],
            [1.0,0.78,0.5]],

        "greys" => [[0.0,0.0,0.0],[0.1,0.1,0.1],[0.2,0.2,0.2],[0.3,0.3,0.3],[0.4,0.4,0.4],[0.5,0.5,0.5],
            [0.6,0.6,0.6],[0.7,0.7,0.7],[0.8,0.8,0.8],[0.9,0.9,0.9],[1.0,1.0,1.0]],

        "rainbow" => [[0.588, 0.000, 0.353],[0.118, 0.000, 0.698],[0.000, 0.059, 0.914],
            [0.000, 0.297, 1.000],[0.035, 0.677, 0.918],[0.173, 1.000, 0.588],
            [0.508, 1.000, 0.118],[0.837, 0.951, 0.000],[1.000, 0.725, 0.000],
            [1.000, 0.348, 0.000],[1.000, 0.000, 0.000]],

        "rainbow_soft" => [[0.490, 0.000, 0.702],[0.780, 0.000, 0.706],[1.000, 0.000, 0.475],
            [1.000, 0.424, 0.000],[0.871, 0.761, 0.000],[0.588, 1.000, 0.000], 
            [0.000, 1.000, 0.216],[0.000, 0.965, 0.588],[0.196, 0.655, 0.871],
            [0.404, 0.200, 0.922],[0.486, 0.000, 0.729]],
        
        "white" => convert_f32([[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],
            [1,1,1],[1,1,1],[1,1,1]]),

        "black" => convert_f32([[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],
            [0,0,0],[0,0,0],[0,0,0]]),

        "red" => convert_f32([[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],
            [1,0,0],[1,0,0],[1,0,0]]),

        "green" => convert_f32([[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],
            [0,1,0],[0,1,0],[0,1,0]]),

        "blue" => convert_f32([[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],
            [0,0,1],[0,0,1],[0,0,1]]),

        "yellow" => convert_f32([[1,1,0],[1,1,0],[1,1,0],[1,1,0],[1,1,0],[1,1,0],[1,1,0],[1,1,0],
            [1,1,0],[1,1,0],[1,1,0]]),

        "cyan" => convert_f32([[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],
            [0,1,1],[0,1,1],[0,1,1]]),

        "fuchsia" => convert_f32([[1,0,1],[1,0,1],[1,0,1],[1,0,1],[1,0,1],[1,0,1],[1,0,1],[1,0,1],
            [1,0,1],[1,0,1],[1,0,1]]),

        "terrain" => [[0.1765,0.2471,0.6471],[0.0392,0.5176,0.9176],[0.0000,0.7451,0.5725],
            [0.3098,0.8627,0.4588],[0.7098,0.9451,0.5451],[0.9686,0.9608,0.5843],[0.7686,0.7059,0.4784],
            [0.5451,0.4196,0.3529],[0.6196,0.5098,0.4863],[0.7765,0.7137,0.7020],[0.9490,0.9333,0.9333]],

        "ocean" => [[0.0000,0.4627,0.0275],[0.0000,0.3216,0.1176],[0.0000,0.1686,0.2196], 
            [0.0000,0.0392,0.3098],[0.0000,0.0902,0.3961],[0.0000,0.2275,0.4863],[0.0000,0.3804,0.5843],
            [0.0510,0.5255,0.6863],[0.3137,0.6549,0.7686],[0.5922,0.7961,0.8627],[0.9020,0.9490,0.9647]],

        // "jet" as default
        _ => [[0.0,0.0,0.51],[0.0,0.24,0.67],[0.01,0.49,0.78],[0.01,0.75,0.89],[0.02,1.0,1.0],
            [0.51,1.0,0.5],[1.0,1.0,0.0],[0.99,0.67,0.0],[0.99,0.33,0.0],[0.98,0.0,0.0],[0.5,0.0,0.0]],
    };

    colors
}

fn convert_f32(a: [[i32; 3]; 11]) -> [[f32; 3]; 11] {
    let b: Vec<[f32;3]> = a.iter().map(|&c| [c[0] as f32, c[1] as f32, c[2] as f32]).collect();
    let mut arr:[[f32; 3]; 11] = [[0.0; 3]; 11];
    for i in 0..11 {
        arr[i] = b[i].clone();
    }
    arr
}
